{
    "version": "https://jsonfeed.org/version/1",
    "title": "Saheb Ansari | Software Engineer",
    "description": "",
    "home_page_url": "https://www.sahebansari.com",
    "feed_url": "https://www.sahebansari.com/feed.json",
    "user_comment": "",
    "icon": "https://www.sahebansari.com/media/website/logo-transparent-svg-2.svg",
    "author": {
        "name": "Saheb Ansari"
    },
    "items": [
        {
            "id": "https://www.sahebansari.com/openapi-support-in-aspnet-core-9-and-using-swagger-ui-for-api-documentation.html",
            "url": "https://www.sahebansari.com/openapi-support-in-aspnet-core-9-and-using-swagger-ui-for-api-documentation.html",
            "title": "OpenAPI Support in ASP.NET Core 9 and Using Swagger UI for API Documentation",
            "summary": "Introduction Hey there, fellow developers! If you're diving into the world of web development, you know how important it is&hellip;",
            "content_html": "<h2>Introduction</h2>\n<p>Hey there, fellow developers! If you're diving into the world of web development, you know how important it is to have well-documented APIs. ASP.NET Core 9 has got your back with enhanced support for OpenAPI, making it super easy to document your Web APIs. In this post, we'll walk you through how to leverage OpenAPI in ASP.NET Core 9 and use Swagger UI to create awesome API documentation.</p>\n<h2>What is OpenAPI?</h2>\n<p>First things first, let's talk about OpenAPI. Formerly known as Swagger, OpenAPI is a specification for building APIs. It helps you define your APIs in a standardized format, making them easier to understand, test, and integrate with other systems. Think of it as a blueprint for your API, detailing its structure, endpoints, request/response formats, and authentication methods.</p>\n<h2>Setting Up ASP.NET Core 9</h2>\n<p>Ready to get started? Make sure you have the latest version of the .NET SDK installed. You can create a new ASP.NET Core 9 project with this command:</p>\n<pre class=\"language-bash line-numbers\"><code>dotnet new webapi -minimal -n MyApiProject cd MyApiProject</code></pre>\n<h2>Adding OpenAPI Support</h2>\n<p>ASP.NET Core 9 comes with built-in support for OpenAPI. To enable it, you'll need to add the <code>Microsoft.AspNetCore.OpenApi</code> package to your project. Just run:</p>\n<pre class=\"language-bash line-numbers\"><code>dotnet add package Microsoft.AspNetCore.OpenApi</code></pre>\n<p>Next, open the <code>Program.cs</code> file and configure OpenAPI in the <code>ConfigureServices</code> and <code>Configure</code> methods:</p>\n<pre class=\"language-csharp line-numbers\"><code>var builder = WebApplication.CreateBuilder(args);\n\n\n// builder.Services.AddEndpointsApiExplorer();\n// builder.Services.AddSwaggerGen();\n// The above two lines are not needed with ASP.Net Core 9 \n\n// Learn more about configuring OpenAPI at https://aka.ms/aspnet/openapi\nbuilder.Services.AddOpenApi();\n\nvar app = builder.Build();\n\nif (app.Environment.IsDevelopment())\n{\n    // app.UseSwagger(); This is also not needed now. Instead use function MapOpenApi()\n    app.MapOpenApi(\"OpenApi/v1/OpenApiDoc.json\");\n    app.UseSwaggerUI(c =&gt;\n    {\n     c.SwaggerEndpoint(\"/OpenApi/v1/OpenApiDoc.json\", \"My API Documentation V1\");\n    }\n  \n}\n\napp.UseHttpsRedirection();\n\nvar apiGroup = app.MapGroup(\"/api\");\n\napiGroup.MapGet(\"/greet\", () =&gt; \"Hello, World!\")\n    .WithName(\"Greet\")\n    .WithDescription(\"Returns a greeting message.\");\n\napp.Run();\n</code></pre>\n<h2>Using Swagger UI</h2>\n<p>Swagger UI is a fantastic tool that automatically generates interactive API documentation from your OpenAPI specification. With Swagger UI, you can visualize and test your API endpoints right from your browser.</p>\n<p>To check it out, run your application and navigate to <code>http://localhost:5000</code> (or the appropriate URL for your setup). You'll see a user-friendly interface displaying your API endpoints, request/response formats, and other details.</p>\n<h2>Customizing Swagger UI</h2>\n<p>Want to make Swagger UI your own? You can customize its appearance and behavior by tweaking the <code>SwaggerUIOptions</code> in the <code>Configure</code> method. For example, you can change the theme, add custom CSS, or enable deep linking:</p>\n<pre class=\"language-csharp line-numbers\"><code>app.UseSwaggerUI(c =&gt;\n{\n    c.SwaggerEndpoint(\"/OpenApi/v1/OpenApiDoc.json\", \"My API Documentation V1\");\n    c.RoutePrefix = \"OpenApiDoc\";\n    c.DocumentTitle = \"My Custom API Documentation\";\n    c.InjectStylesheet(\"/swagger-ui/custom.css\");\n    c.EnableDeepLinking();\n});\n</code></pre>\n<h3>What is <code>EnableDeepLinking()</code>?</h3>\n<p>The <code>EnableDeepLinking()</code> function in Swagger UI is a nifty feature that allows you to enable deep linking for tags and operations. This means each tag and operation in your API documentation will have a unique URL that can be bookmarked and shared. When you navigate to a specific tag or operation using its URL, Swagger UI will automatically expand and highlight the corresponding section. This is super handy for large APIs, as it lets users quickly access and share specific parts of the documentation.</p>\n<h2>Providing Descriptions for Endpoints</h2>\n<p>In Minimal APIs, you can provide descriptions for your endpoints using the <code>WithDescription</code> method. This method lets you add a brief description of what the endpoint does, which will be displayed in the Swagger UI. For example:</p>\n<pre class=\"language-csharp line-numbers\"><code>apiGroup.MapGet(\"/greet\", () =&gt; \"Hello, World!\")\n    .WithName(\"Greet\")\n    .WithDescription(\"Returns a greeting message.\");\n</code></pre>\n<p>These descriptions help users understand the purpose of each endpoint and how to use them effectively.</p>\n<h2>Launch Settings for Swagger UI</h2>\n<p>To automatically open Swagger UI when you run your project, you can configure the launch settings in the <code>launchSettings.json</code> file. Here's how you can do it:</p>\n<ol start=\"1\">\n<li>\n<p>Open the <code>Properties</code> folder in your project.</p>\n</li>\n<li>\n<p>Open the <code>launchSettings.json</code> file.</p>\n</li>\n<li>\n<p>Add the following configuration under the <code>profiles</code> section:</p>\n</li>\n</ol>\n<pre class=\"language-json line-numbers\"><code>{\n  \"profiles\": {\n    \"MyApiProject\": {\n      \"commandName\": \"Project\",\n      \"dotnetRunMessages\": true,\n      \"launchBrowser\": true,\n      \"launchUrl\": \"OpenApiDoc\",\n      \"applicationUrl\": \"https://localhost:5001;http://localhost:5000\",\n      \"environmentVariables\": {\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n      }\n    }\n  }\n}\n</code></pre>\n<h2>Conclusion</h2>\n<p>OpenAPI support in ASP.NET Core 9, combined with Swagger UI, provides a powerful and user-friendly way to document your Web APIs. By following the steps outlined in this blog post, you can create comprehensive and interactive API documentation that will benefit both developers and users.</p>\n<p>Happy coding!😊</p>",
            "image": "https://www.sahebansari.com/media/posts/14/documentation-2.png",
            "author": {
                "name": "Saheb Ansari"
            },
            "tags": [
                   "SwaggerUI",
                   "Posts",
                   "OpenAPI",
                   "C#",
                   "ASP.NET"
            ],
            "date_published": "2024-12-21T19:33:31+05:30",
            "date_modified": "2024-12-21T23:20:05+05:30"
        },
        {
            "id": "https://www.sahebansari.com/implementing-key-based-and-basic-authentication-in-the-same-project.html",
            "url": "https://www.sahebansari.com/implementing-key-based-and-basic-authentication-in-the-same-project.html",
            "title": "Implementing Key-Based and Basic Authentication in the same ASP.NET Core 9 Project",
            "summary": "Introduction In today's rapidly evolving digital landscape, securing web applications is paramount. Implementing robust authentication strategies is crucial to protect&hellip;",
            "content_html": "<h3>Introduction</h3>\n<p>In today's rapidly evolving digital landscape, securing web applications is paramount. Implementing robust authentication strategies is crucial to protect sensitive data and ensure authorized access. ASP.NET Core 9 provides versatile authentication methods, allowing developers to integrate multiple ways to authenticate users within a single project. This blog will guide you through implementing both key-based and basic authentication in ASP.NET Core 9, utilizing C# sample code for seamless integration. These methods, when combined, offer enhanced security solutions tailored to specific application needs.</p>\n<h3>Understanding Authentication Mechanisms</h3>\n<p class=\"msg msg--highlight\">Authentication is the process of identifying who a user is and ensuring that they are allowed to access the resources or operations they are requesting. In ASP.NET Core 9, authentication is achieved through middleware that intercepts HTTP requests and applies specific authentication logic. Two common mechanisms are key-based authentication, which involves API keys, and basic authentication, which uses user credentials like usernames and passwords.</p>\n<p><strong>Key-Based Authentication:</strong> This mechanism requires clients to include a secret key in their requests, enabling servers to verify the client's identity. It's often used in scenarios where non-user-based identification is needed, such as in API access for applications or services.</p>\n<p><strong>Basic Authentication:</strong> On the other hand, basic authentication is a simpler approach where users provide a username and password to access resources. It’s straightforward but doesn't offer the strongest security, especially if used without encryption, since credentials are sent in base64 encoded format (not encrypted).</p>\n<h3><strong>Why Use Two Authentication Methods?</strong></h3>\n<p>Imagine you have:</p>\n<ul>\n<li>An API that external systems access using an API key.</li>\n<li>Endpoints for users to log in with a username and password.</li>\n</ul>\n<p>Instead of picking one method, why not use both? ASP.NET Core 9 supports multiple authentication schemes, so you can cater to diverse needs seamlessly.</p>\n<h3><strong>Getting Started</strong></h3>\n<p>First, set up an ASP.NET Core 9 project. If you already have one, feel free to skip this part. Otherwise:</p>\n<ol>\n<li>Open a terminal or <strong>Visual Studio</strong>.</li>\n<li>Create a new web API project:<br>\n<pre class=\"language-bash line-numbers\"><code>dotnet new webapi -n MultiAuthDemo</code></pre>\n</li>\n<li>Move to the project folder:<br>\n<pre class=\"language-bash line-numbers\"><code>cd MultiAuthDemo</code></pre>\n</li>\n</ol>\n<h3>Step 1: Configure Authentication in Program.cs</h3>\n<p>In ASP.NET Core, the magic starts in <code>Program.cs</code>. Here, we'll register the two authentication schemes: Key-Based and Basic Authentication. <br>Add the following code:</p>\n<pre class=\"language-csharp line-numbers\"><code>using Microsoft.AspNetCore.Authentication;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Add authentication services\nbuilder.Services.AddAuthentication()\n    .AddScheme&lt;KeyAuthenticationOptions, \n         KeyAuthenticationHandler&gt;(\"KeyAuthentication\", null)\n\n    .AddScheme&lt;BasicAuthenticationOptions, \n         BasicAuthenticationHandler&gt;(\"BasicAuthentication\", null);\n\n// Configure authorization policies\nbuilder.Services.AddAuthorization(options =&gt;\n{\n    options.AddPolicy(\"KeyPolicy\", policy =&gt;\n        policy.AddAuthenticationSchemes(\"KeyAuthentication\").RequireAuthenticatedUser());\n    options.AddPolicy(\"BasicPolicy\", policy =&gt;\n        policy.AddAuthenticationSchemes(\"BasicAuthentication\").RequireAuthenticatedUser());\n});\n\n// Add controllers\nbuilder.Services.AddControllers();\n\nvar app = builder.Build();\n\napp.UseAuthentication();\napp.UseAuthorization();\n\napp.MapControllers();\n\napp.Run();</code></pre>\n<h3><strong>Step 2: Key-Based Authentication</strong></h3>\n<p>Key-Based Authentication requires clients to include a valid API key in the request header. Let’s implement it step by step.<br><strong><br>Create Options for API Key<br></strong></p>\n<pre class=\"language-csharp line-numbers\"><code>using Microsoft.AspNetCore.Authentication;\n\npublic class KeyAuthenticationOptions : AuthenticationSchemeOptions\n{\n    public string ApiKey { get; set; } = \"SuperSecretKey123\";\n}</code></pre>\n<p><strong>Create the Authentication Handler<br></strong></p>\n<pre class=\"language-csharp line-numbers\"><code>using Microsoft.AspNetCore.Authentication;\nusing Microsoft.Extensions.Options;\nusing System.Security.Claims;\n\npublic class KeyAuthenticationHandler : AuthenticationHandler&lt;KeyAuthenticationOptions&gt;\n{\n    public KeyAuthenticationHandler(\n        IOptionsMonitor&lt;KeyAuthenticationOptions&gt; options,\n        ILoggerFactory logger,\n        System.Text.Encodings.Web.UrlEncoder encoder,\n        ISystemClock clock)\n        : base(options, logger, encoder, clock) { }\n\n    protected override Task&lt;AuthenticateResult&gt; HandleAuthenticateAsync()\n    {\n        if (!Request.Headers.TryGetValue(\"X-Api-Key\", out var apiKey))\n        {\n            return Task.FromResult(AuthenticateResult.Fail(\"API Key not found.\"));\n        }\n\n        if (apiKey != Options.ApiKey)\n        {\n            return Task.FromResult(AuthenticateResult.Fail(\"Invalid API Key.\"));\n        }\n\n        var claims = new[] { new Claim(ClaimTypes.Name, \"ApiClient\") };\n        var identity = new ClaimsIdentity(claims, Scheme.Name);\n        var principal = new ClaimsPrincipal(identity);\n        var ticket = new AuthenticationTicket(principal, Scheme.Name);\n\n        return Task.FromResult(AuthenticateResult.Success(ticket));\n    }\n}</code></pre>\n<h3><strong>Step 3: Basic Authentication</strong></h3>\n<p>Now let’s move to Basic Authentication. Here, clients send a username and password encoded in Base64.<br><br><strong>Create Basic Options</strong></p>\n<pre class=\"language-csharp line-numbers\"><code>using Microsoft.AspNetCore.Authentication;\n\npublic class BasicAuthenticationOptions : AuthenticationSchemeOptions\n{\n}</code></pre>\n<p><strong>Create the Authentication Handler<br></strong></p>\n<pre class=\"language-csharp line-numbers\"><code>using Microsoft.AspNetCore.Authentication;\nusing System.Security.Claims;\nusing System.Text;\n\npublic class BasicAuthenticationHandler : AuthenticationHandler&lt;BasicAuthenticationOptions&gt;\n{\n    public BasicAuthenticationHandler(\n        IOptionsMonitor&lt;BasicAuthenticationOptions&gt; options,\n        ILoggerFactory logger,\n        System.Text.Encodings.Web.UrlEncoder encoder,\n        ISystemClock clock)\n        : base(options, logger, encoder, clock) { }\n\n    protected override Task&lt;AuthenticateResult&gt; HandleAuthenticateAsync()\n    {\n        if (!Request.Headers.ContainsKey(\"Authorization\"))\n        {\n            return Task.FromResult(AuthenticateResult.Fail(\"Authorization header is missing.\"));\n        }\n\n        var authHeader = Request.Headers[\"Authorization\"].ToString();\n        if (!authHeader.StartsWith(\"Basic \", StringComparison.OrdinalIgnoreCase))\n        {\n            return Task.FromResult(AuthenticateResult.Fail(\"Invalid Authorization header.\"));\n        }\n\n        var encodedCredentials = authHeader.Substring(\"Basic \".Length).Trim();\n        var decodedBytes = Convert.FromBase64String(encodedCredentials);\n        var credentials = Encoding.UTF8.GetString(decodedBytes).Split(':', 2);\n\n        if (credentials.Length != 2 || credentials[0] != \"testuser\" || credentials[1] != \"password123\")\n        {\n            return Task.FromResult(AuthenticateResult.Fail(\"Invalid username or password.\"));\n        }\n\n        var claims = new[] { new Claim(ClaimTypes.Name, credentials[0]) };\n        var identity = new ClaimsIdentity(claims, Scheme.Name);\n        var principal = new ClaimsPrincipal(identity);\n        var ticket = new AuthenticationTicket(principal, Scheme.Name);\n\n        return Task.FromResult(AuthenticateResult.Success(ticket));\n    }\n}</code></pre>\n<h3><strong>Step 4: Create Secured Endpoints</strong></h3>\n<p>Finally, let’s set up API endpoints to test both authentication methods.</p>\n<pre class=\"language-csharp line-numbers\"><code>using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\n\n[ApiController]\n[Route(\"api\")]\npublic class ApiController : ControllerBase\n{\n    [HttpGet(\"key-secure\")]\n    [Authorize(Policy = \"KeyPolicy\")]\n    public IActionResult SecureWithKey()\n    {\n        return Ok(new { Message = \"You accessed this using an API Key!\" });\n    }\n\n    [HttpGet(\"basic-secure\")]\n    [Authorize(Policy = \"BasicPolicy\")]\n    public IActionResult SecureWithBasic()\n    {\n        return Ok(new { Message = \"You accessed this using Basic Authentication!\" });\n    }\n}</code></pre>\n<h3><strong>Step 5: Testing with Postman</strong></h3>\n<h4><strong>For API Key Authentication</strong></h4>\n<ol>\n<li>Open Postman and create a <code>GET</code> request to:\n<div>\n<div><code>https://localhost:5001/api/key-secure\n\t\t\t\t</code></div>\n</div>\n</li>\n<li>Under the <strong>Headers</strong> tab, add:\n<ul>\n<li>Key: <code>X-Api-Key</code></li>\n<li>Value: <code>SuperSecretKey123</code></li>\n</ul>\n</li>\n<li>Hit <strong>Send</strong>.<br><strong>Response</strong>:<br><code class=\"language-json\">{\n\t\t\t\"message\": \"You accessed this using an API Key!\"\n\t\t\t}</code></li>\n</ol>\n<h4><strong>For Basic Authentication</strong></h4>\n<ol>\n<li>Create another <code>GET</code> request to:\n<div>\n<div><code>https://localhost:5001/api/basic-secure\n\t\t\t\t</code></div>\n</div>\n</li>\n<li>Under the <strong>Authorization</strong> tab, select <strong>Basic Auth</strong> and fill in:\n<ul>\n<li>Username: <code>testuser</code></li>\n<li>Password: <code>password123</code></li>\n</ul>\n</li>\n<li>Hit <strong>Send</strong>.<br><strong>Response</strong>:</li>\n</ol>\n<div>\n<div><code class=\"language-json\"><span class=\"hljs-punctuation\">{</span>\n\t\t\t<span class=\"hljs-attr\">\"message\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"You accessed this using Basic Authentication!\"</span>\n\t\t\t<span class=\"hljs-punctuation\">}</span>\n\t\t</code></div>\n<div> </div>\n<div>\n<h3><strong>Wrapping Up</strong></h3>\n<p>And that’s it! You now have an ASP.NET Core 9 project with both Key-Based and Basic Authentication running side by side. With just a few tweaks, you can customize this setup to fit your application's needs.</p>\n<p>Keep coding and stay secure! 🚀</p>\n</div>\n</div>",
            "image": "https://www.sahebansari.com/media/posts/13/auth.png",
            "author": {
                "name": "Saheb Ansari"
            },
            "tags": [
                   "Programming",
                   "C#",
                   "ASP.NET"
            ],
            "date_published": "2024-12-07T18:18:23+05:30",
            "date_modified": "2024-12-07T18:48:28+05:30"
        },
        {
            "id": "https://www.sahebansari.com/minimal-api-in-aspnet-core-deep-dive-with-benefits-and-comparisons.html",
            "url": "https://www.sahebansari.com/minimal-api-in-aspnet-core-deep-dive-with-benefits-and-comparisons.html",
            "title": "Minimal API in ASP.NET Core 9: A Deep Dive with Benefits and Comparisons",
            "summary": "Minimal APIs in ASP.NET Core 9 have significantly transformed the landscape of web service development for programmers. These APIs present&hellip;",
            "content_html": "<p>Minimal APIs in ASP.NET Core 9 have significantly transformed the landscape of web service development for programmers. These APIs present a streamlined and lightweight alternative to the traditional Model-View-Controller (MVC) architecture, allowing developers to build applications that not only perform better but also require less overhead. This section will take an in-depth look at Minimal APIs, providing detailed explanations and practical examples that illustrate their functionality. Additionally, it will highlight the numerous advantages they hold over the MVC pattern, culminating in a thorough performance comparison illustrated by a chart that visualizes the differences in response times and efficiency between the two approaches.<br><br></p>\n<p class=\"msg msg--highlight\"><strong>What are Minimal APIs?</strong><br>Minimal APIs simplify the process of building HTTP APIs by reducing boilerplate code. They leverage the flexibility of ASP.NET Core’s middleware pipeline and focus on defining endpoints using simple and intuitive syntax.<br><br></p>\n<h4>Features of Minimal APIs</h4>\n<ol>\n<li><strong>Concise Syntax:</strong> Define endpoints in a few lines of code.</li>\n<li><strong>Integrated Dependency Injection (DI):</strong> Seamlessly access services.</li>\n<li><strong>Built-in OpenAPI Support:</strong> Auto-generate Swagger documentation.</li>\n<li><strong>High Performance:</strong> Lower overhead compared to MVC.</li>\n<li><strong>Customizable Middleware:</strong> Fine-grained control over request/response processing.</li>\n</ol>\n<p><strong>Minimal API Example</strong> <br>Here’s how to build a simple CRUD API using Minimal APIs in ASP.NET Core 9:<br><br><strong>Step 1: Setting Up a Simple API</strong></p>\n<pre class=\"language-csharp line-numbers\"><code>csharp\n\nvar builder = WebApplication.CreateBuilder(args);\nvar app = builder.Build();\n\n// In-memory data store\nvar products = new List&lt;Product&gt;();\n\napp.MapGet(\"/products\", () =&gt; Results.Ok(products))\n   .WithName(\"GetAllProducts\")\n   .WithOpenApi();\n\napp.MapGet(\"/products/{id}\", (int id) =&gt;\n{\n    var product = products.FirstOrDefault(p =&gt; p.Id == id);\n    return product is not null ? Results.Ok(product) : Results.NotFound();\n}).WithName(\"GetProductById\");\n\napp.MapPost(\"/products\", (Product product) =&gt;\n{\n    products.Add(product);\n    return Results.Created($\"/products/{product.Id}\", product);\n}).WithName(\"CreateProduct\");\n\napp.MapPut(\"/products/{id}\", (int id, Product updatedProduct) =&gt;\n{\n    var product = products.FirstOrDefault(p =&gt; p.Id == id);\n    if (product is null) return Results.NotFound();\n\n    product.Name = updatedProduct.Name;\n    product.Price = updatedProduct.Price;\n    return Results.Ok(product);\n}).WithName(\"UpdateProduct\");\n\napp.MapDelete(\"/products/{id}\", (int id) =&gt;\n{\n    var product = products.FirstOrDefault(p =&gt; p.Id == id);\n    if (product is null) return Results.NotFound();\n\n    products.Remove(product);\n    return Results.NoContent();\n}).WithName(\"DeleteProduct\");\n\napp.Run();\n\npublic record Product(int Id, string Name, decimal Price);\n</code></pre>\n<h4><br>Benefits Over MVC</h4>\n<table>\n<thead>\n<tr style=\"background-color: #f8cac6;\">\n<th><strong>Feature</strong></th>\n<th><strong>Minimal APIs</strong></th>\n<th><strong>MVC</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Complexity</strong></td>\n<td>Minimal and lightweight</td>\n<td>Higher complexity due to layers</td>\n</tr>\n<tr>\n<td><strong>Boilerplate Code</strong></td>\n<td>Minimal</td>\n<td>More setup and configurations</td>\n</tr>\n<tr>\n<td><strong>Performance</strong></td>\n<td>Higher, due to reduced overhead</td>\n<td>Slightly lower due to abstractions</td>\n</tr>\n<tr>\n<td><strong>Startup Time</strong></td>\n<td>Faster</td>\n<td>Slower</td>\n</tr>\n<tr>\n<td><strong>Use Case</strong></td>\n<td>Ideal for small APIs and microservices</td>\n<td>Best for full-fledged applications with complex logic</td>\n</tr>\n</tbody>\n</table>\n<h4>Benefits of Minimal APIs</h4>\n<ol>\n<li><strong>Reduced Boilerplate:</strong> Less code to maintain.</li>\n<li><strong>Improved Developer Productivity:</strong> Quick to set up and deploy.</li>\n<li><strong>High Performance:</strong> Direct routing and middleware execution reduce processing time.</li>\n<li><strong>Easy Learning Curve:</strong> Simple for new developers to understand.</li>\n<li><strong>Versatility:</strong> Suitable for microservices, server-less functions, and lightweight APIs.</li>\n</ol>\n<h4>Market Adoption</h4>\n<p>Minimal APIs have gained traction, particularly in scenarios where rapid development and scalability are essential, such as:</p>\n<ol>\n<li><strong>Microservices Architecture:</strong> Ideal for creating small, independently deployable services.</li>\n<li><strong>Serverless Computing:</strong> Works seamlessly with platforms like Azure Functions and AWS Lambda.</li>\n<li><strong>Startups and Prototypes:</strong> Great for MVPs and proof-of-concept applications.</li>\n</ol>\n<h4>Performance Comparison: Minimal API vs MVC</h4>\n<p>Below is a comparison chart based on typical benchmarking scenarios (e.g., handling 1,000 requests/sec with varying payload sizes):</p>\n<p>Performance Chart</p>\n<table>\n<thead>\n<tr style=\"background-color: #bfedd2;\">\n<th><strong>Metric</strong></th>\n<th><strong>Minimal API</strong></th>\n<th><strong>MVC</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Startup Time (ms)</td>\n<td>200</td>\n<td>400</td>\n</tr>\n<tr>\n<td>Memory Usage (MB)</td>\n<td>50</td>\n<td>120</td>\n</tr>\n<tr>\n<td>Requests per Second</td>\n<td>10,000</td>\n<td>7,500</td>\n</tr>\n<tr>\n<td>Latency (ms/request)</td>\n<td>10</td>\n<td>15</td>\n</tr>\n</tbody>\n</table>\n<h4>Conclusion</h4>\n<p>Minimal APIs in ASP.NET Core 9 represent a paradigm shift for building lightweight, high-performance APIs. With features like integrated OpenAPI support, dependency injection, and streamlined syntax, they are poised to play a crucial role in modern web development. While MVC remains a powerful tool for complex applications, Minimal APIs shine in scenarios requiring simplicity, speed, and efficiency.<br><br>By leveraging Minimal APIs, developers can focus on delivering value faster, making it a must-have skill in your development toolkit.</p>",
            "image": "https://www.sahebansari.com/media/posts/11/web-api.png",
            "author": {
                "name": "Saheb Ansari"
            },
            "tags": [
                   "Programming",
                   "Posts",
                   "C#",
                   "ASP.NET"
            ],
            "date_published": "2024-11-30T21:42:33+05:30",
            "date_modified": "2024-11-30T22:35:48+05:30"
        },
        {
            "id": "https://www.sahebansari.com/exploring-the-unique-features-of-aspnet-core-9.html",
            "url": "https://www.sahebansari.com/exploring-the-unique-features-of-aspnet-core-9.html",
            "title": "Exploring the Unique Features of ASP.NET Core 9: A Comprehensive Guide with Examples",
            "summary": "ASP.NET Core 9, the latest iteration of Microsoft's robust web framework, brings a plethora of enhancements aimed at improving developer&hellip;",
            "content_html": "<p>ASP.NET Core 9, the latest iteration of Microsoft's robust web framework, brings a plethora of enhancements aimed at improving developer productivity, performance, and the overall experience of building modern web applications. This article will highlight the most intriguing features of ASP.NET Core 9, complete with example code to demonstrate their capabilities.</p>\n<hr>\n<p><strong>1. Native Support for Blazor Hybrid Apps</strong><br>With ASP.NET Core 9, Blazor apps can now seamlessly integrate with native desktop and mobile platforms. This feature allows developers to share UI components across web and native platforms.<br><br><strong>Example: Blazor Component for Both Web and Native</strong></p>\n<pre class=\"language-aspnet line-numbers\"><code>razor\n\n&lt;h1&gt;Hello, Blazor Hybrid!&lt;/h1&gt;\n&lt;p&gt;This component works on both web and native platforms.&lt;/p&gt;</code></pre>\n<p>To use this component in a hybrid app:<br>Add it to a .razor file in your project.<br>Use it in a web or native application via the same Razor syntax.</p>\n<p><strong>2. Improved Minimal APIs</strong><br>Minimal APIs have been further enhanced in ASP.NET Core 9, making it easier than ever to build lightweight services.<br><br><strong>Example: Minimal API with OpenAPI Documentation</strong></p>\n<pre class=\"language-csharp line-numbers\"><code>csharp\n\nvar builder = WebApplication.CreateBuilder(args);\nvar app = builder.Build();\n\napp.MapGet(\"/api/hello\", () =&gt; Results.Ok(\"Hello, World!\"))\n   .WithName(\"GetHello\")\n   .WithOpenApi(); // Automatically generates OpenAPI documentation\n\napp.Run();</code></pre>\n<p><br>Now, by running your app, OpenAPI documentation will be generated and available at <em><span style=\"text-decoration: underline;\">/swagger</span></em>.<br><br><strong>3. Enhanced Middleware Pipelines</strong><br>Middleware is at the heart of ASP.NET Core, and the latest version provides more flexibility, including middleware chaining with better error handling.<br><br><strong>Example: Conditional Middleware Execution</strong></p>\n<pre class=\"language-csharp line-numbers\"><code>csharp\n\napp.Use(async (context, next) =&gt;\n{\n    if (context.Request.Path == \"/admin\")\n    {\n        await context.Response.WriteAsync(\"Admin Access Only\");\n    }\n    else\n    {\n        await next();\n    }\n});\napp.MapGet(\"/\", () =&gt; \"Welcome to ASP.NET Core 9!\");</code></pre>\n<p><strong>4. Performance Improvements with Native AOT</strong><br>ASP.NET Core 9 introduces Native Ahead-Of-Time (AOT) compilation, which dramatically improves the performance of your apps by precompiling them into optimized machine code.<br><br><strong>Example: Enabling Native AOT</strong><br>In your project file:</p>\n<pre class=\"language-html line-numbers\"><code>xml\n\n&lt;PropertyGroup&gt;\n  &lt;PublishAot&gt;true&lt;/PublishAot&gt;\n&lt;/PropertyGroup&gt;</code></pre>\n<p>Publish your app using:</p>\n<pre class=\"language-bash line-numbers\"><code>bash\n\ndotnet publish -c Release</code></pre>\n<p><strong>5. SignalR Enhancements</strong><br>SignalR has received updates for better real-time communication, including reduced latency and extended protocol support.<br><br><strong>Example: Simple SignalR Setup</strong></p>\n<pre class=\"language-csharp line-numbers\"><code>csharp\n\nvar builder = WebApplication.CreateBuilder(args);\nvar app = builder.Build();\n\napp.MapHub&lt;ChatHub&gt;(\"/chat\");\n\npublic class ChatHub : Hub\n{\n    public async Task SendMessage(string user, string message)\n    {\n        await Clients.All.SendAsync(\"ReceiveMessage\", user, message);\n    }\n}\n\napp.Run();</code></pre>\n<p>On the client side, use JavaScript or .NET to connect to <em><span style=\"text-decoration: underline;\">/chat</span></em>.<br><br><strong>6. Cross-Origin Resource Sharing (CORS) Improvements</strong><br>CORS is more configurable in ASP.NET Core 9, allowing granular control over cross-origin requests.<br><br><strong>Example: Configuring CORS</strong></p>\n<pre class=\"language-csharp line-numbers\"><code>csharp\n\nbuilder.Services.AddCors(options =&gt;\n{\n    options.AddPolicy(\"AllowSpecificOrigin\",\n        builder =&gt; builder.WithOrigins(\"https://example.com\")\n                          .AllowAnyMethod()\n                          .AllowAnyHeader());\n});\n\napp.UseCors(\"AllowSpecificOrigin\");\napp.MapGet(\"/\", () =&gt; \"CORS Configured!\");</code></pre>\n<p><strong>7. Modernized Dependency Injection</strong><br>ASP.NET Core 9 introduces better ways to register and resolve services, including dynamic service providers.<br><br><strong>Example: Registering Services</strong></p>\n<pre class=\"language-csharp line-numbers\"><code>csharp\n\nbuilder.Services.AddSingleton&lt;IMyService, MyService&gt;();\n\npublic interface IMyService\n{\n    string GetData();\n}\n\npublic class MyService : IMyService\n{\n    public string GetData() =&gt; \"Hello from MyService!\";\n}\n\napp.MapGet(\"/service\", (IMyService service) =&gt; service.GetData());</code></pre>\n<p><br><strong>Conclusion</strong><br>ASP.NET Core 9 continues to set the benchmark for web development frameworks by combining performance, simplicity, and versatility. Whether you're building a simple API or a complex hybrid application, these features enable you to deliver high-quality solutions efficiently.</p>",
            "image": "https://www.sahebansari.com/media/posts/10/aspnet9.jpg",
            "author": {
                "name": "Saheb Ansari"
            },
            "tags": [
                   "Posts",
                   "C#",
                   "ASP.NET"
            ],
            "date_published": "2024-11-30T20:11:43+05:30",
            "date_modified": "2024-12-06T08:16:14+05:30"
        },
        {
            "id": "https://www.sahebansari.com/mastering-clean-code-best-practices-for-error-free-readable-and-lightweight-c-programming.html",
            "url": "https://www.sahebansari.com/mastering-clean-code-best-practices-for-error-free-readable-and-lightweight-c-programming.html",
            "title": "Mastering Clean Code: Best Practices for Error-free, Readable, and Lightweight C# Programming",
            "summary": "Clean code is the hallmark of a skilled software developer. It not only improves code readability but also reduces errors&hellip;",
            "content_html": "<p class=\"dropcap\">Clean code is the hallmark of a skilled software developer. It not only improves code readability but also reduces errors and makes maintenance and scalability easier. In this blog post, we will explore some best coding practices, error handling techniques, and code optimization tips to help you write clean, efficient, and reliable C# code. <br><br><strong>1. Meaningful and Consistent Naming Conventions:</strong><br>One of the fundamental principles of writing clean code is to use meaningful names for variables, functions, classes, and other entities. Ensure that your code follows a consistent naming convention (e.g., camel case or Pascal case) throughout the project. Meaningful names make code more readable, self-documenting, and provide context to fellow developers. Consistency is an essential aspect of clean code. Adopt a consistent naming convention for variables, functions, and classes. Use descriptive names that convey their purpose, making it easier for others to understand and maintain the code.<br><br></p>\n<pre class=\"language-csharp line-numbers\"><code>// C#\n// Example of meaningful variable names\nint studentAge = 20;\nstring studentName = \"John Doe\";\n\n// Example of meaningful function names\npublic bool IsAdult(int age)\n{\n    return age &gt;= 18;\n}</code></pre>\n<p><br><strong>2. Proper Indentation and Formatting:</strong><br>Consistent indentation and code formatting greatly enhance code readability. Use proper spacing and line breaks to organize your code logically. Avoid long lines of code and wrap them to fit within a reasonable length (80-120 characters) for better legibility.</p>\n<pre class=\"language-csharp line-numbers\"><code>// C#\n// Example of properly indented and formatted code\npublic void CalculateSum(int a, int b)\n{\n    int sum = a + b;\n    \n    Console.WriteLine(\"The sum of {0} and {1} is {2}\", a, b, sum);\n}</code></pre>\n<p><br><strong>3. Maintain Short and Focused Methods:</strong><br>To promote code readability and reusability, keep your methods short, focused, and following the Single Responsibility Principle(SRP). Each method should have a clear purpose and do only one thing. Breaking down complex logic into smaller, modular methods not only aids comprehension but also simplifies testing and debugging. Divide your code into smaller, more manageable modules that each have a single responsibility. This approach allowing for code reuse, easier testing, and improved readability. Avoid long and monolithic functions or classes that become hard to comprehend and maintain.</p>\n<pre class=\"language-csharp line-numbers\"><code>// C#\n// Example of breaking down complex logic into smaller methods\npublic int CalculateSum(int a, int b)\n{\n    return a + b;\n}\n\npublic void DisplaySum(int sum)\n{\n    Console.WriteLine(\"The sum is: \" + sum);\n}\n\n// Usage\nint result = CalculateSum(3, 4);\nDisplaySum(result);</code></pre>\n<p><strong>4. Effective Error Handling:</strong><br>Clean code should handle errors gracefully and provide helpful messages for debugging and troubleshooting. Utilize exception handling techniques such as try-catch-finally blocks to catch and handle exceptions appropriately. Avoid using broad catch-all exceptions; instead, catch specific exceptions that you can handle explicitly.</p>\n<pre class=\"language-csharp line-numbers\"><code>// C#\n// Example of proper error handling\ntry\n{\n    int[] numbers = new int[] { 1, 2, 3 };\n    int result = numbers[4]; // accessing an out-of-bounds index\n}\ncatch (IndexOutOfRangeException ex)\n{\n    Console.WriteLine(\"An error occurred: \" + ex.Message);\n}</code></pre>\n<p><strong>5. Optimize Code for Performance:</strong><br>Clean code also means optimizing performance by reducing unnecessary computations, memory usage, and improving code efficiency. Utilize built-in data structures and algorithms whenever possible and avoid reinventing the wheel.</p>\n<pre class=\"language-csharp line-numbers\"><code>// C#\n// Example of using built-in C# features for efficient code\nList&lt;int&gt; numbers = new List&lt;int&gt;() { 1, 2, 3 };\n\nforeach (int number in numbers)\n{\n    Console.WriteLine(number);\n}</code></pre>\n<p><strong>6. Minimize Dependencies:</strong><br>Reduce coupling and dependencies between different parts of your code. Code that is tightly coupled becomes challenging to understand and maintain. Use dependency injection and interfaces to decouple components, promoting code reuse and testability.<br><br><strong>7. Code Refactoring and Simplicity:</strong><br>Refactor your code frequently to eliminate duplication, improve performance, and simplify the implementation. Don't be afraid to rewrite and optimize code if necessary. Simplicity should always be prioritized over complexity to enhance readability.</p>\n<p><strong>Conclusion:</strong><br>Writing clean code in C# goes beyond adhering to a set of guidelines. It requires a mindset that prioritizes readability, error handling, and code optimization. By following best practices, using meaningful naming conventions, maintaining proper indentation, and employing efficient error handling, you can ensure your code is clean, easy to understand, and performs optimally. Remember, clean code benefits not only you but also the other developers who work on the project. So, strive for clean code and become a better programmer.</p>",
            "image": "https://www.sahebansari.com/media/posts/7/programming.png",
            "author": {
                "name": "Saheb Ansari"
            },
            "tags": [
                   "Programming",
                   "Posts",
                   "C#",
                   "Best Practices"
            ],
            "date_published": "2024-11-15T09:20:03+05:30",
            "date_modified": "2024-12-06T08:16:23+05:30"
        },
        {
            "id": "https://www.sahebansari.com/blogging-your-passions-finding-creative-inspiration-in-daily-life.html",
            "url": "https://www.sahebansari.com/blogging-your-passions-finding-creative-inspiration-in-daily-life.html",
            "title": "Blogging Your Passions: Finding Creative Inspiration in Daily Life",
            "summary": "In a world that's always buzzing with distractions and deadlines, taking time to find inspiration can feel like a luxury.",
            "content_html": "<p class=\"dropcap\">In a world that's always buzzing with distractions and deadlines, taking time to find inspiration can feel like a luxury. However, inspiration is closer than you might think—it can come from the things you enjoy doing every day. Blogging about your hobbies can be an incredible way to find inspiration, connect with like-minded people, and even bring a bit of joy to your readers. Here’s how you can make the most of everyday moments and start blogging about what you love!<br><br><strong>1. Discover Inspiration in Small Moments</strong><br>Everyday life is filled with small, often overlooked moments that can serve as a source of inspiration. If you love cooking, a quiet weekend brunch could turn into a blog post about your favorite breakfast recipes or tips for creating the perfect pancake. If you’re passionate about photography, you could blog about capturing the beauty in your neighborhood. No matter your hobby, inspiration can come from observing and appreciating these small details.<br><br><strong>2. Show the World Your Unique Perspective</strong><br>One of the most powerful things about blogging is that it allows you to share your unique view with the world. Whether you’re a skilled painter or an amateur gardener, your perspective matters. Maybe you have a creative way of organizing your workspace, or a unique approach to taking care of plants. Share these insights! Showing your perspective gives readers a glimpse into your life and helps them see familiar things in new ways.<br><br><strong>3. Connect with Your Audience through Authenticity</strong><br>When you blog about a hobby, you’re talking about something you truly care about, and that passion shines through. Authenticity is magnetic—it draws people in. When readers sense that you’re genuinely interested in what you’re writing about, they’re more likely to connect with your blog and become regular visitors. Sharing your challenges, mistakes, and personal growth in your hobby also adds authenticity. People enjoy reading about real experiences and can relate to the ups and downs of learning and improving in any craft.<br><br><strong>4. Use Blogging to Track Your Progress</strong><br>Blogging about your hobbies also serves as a fantastic way to track your progress. By writing regularly, you create a timeline of your growth and accomplishments. For example, if you blog about learning to play the guitar, your early posts might focus on basic chords, while later ones could highlight more advanced techniques. This progress not only keeps you motivated but also inspires your readers, especially those who are just starting out with the same hobby.<br><br><strong>5. Explore New Ideas and Topics</strong><br>Writing about your hobbies can push you to learn more about them. When you sit down to write a post, you might find yourself researching, exploring new topics, or trying out new techniques so you can share them with your readers. Blogging gives you a reason to dig deeper into your interests, helping you learn and grow in the process. You might even come up with content ideas that you wouldn’t have considered before, like “Top 5 Mistakes I Made as a New Gardener” or “How to Choose the Perfect Brush for Watercolor Painting.”<br><br><strong>6. Build a Community of Like-Minded People</strong><br>One of the best aspects of blogging is the chance to connect with others who share your interests. By putting your thoughts and experiences online, you attract people who are also interested in your hobby. Engaging with comments, joining hobby-related forums, or connecting with other bloggers can expand your knowledge, give you new ideas, and help you build a support system. This community can provide you with feedback, encouragement, and even friendship as you continue exploring your interests.<br><br><strong>7. Inspire Others with Your Passion</strong><br>Lastly, blogging about your hobbies can inspire others to start their own journey. Your passion and dedication might encourage someone who’s hesitant about starting a new hobby to take the plunge. When people see how much joy, fulfillment, and personal growth you gain from your hobby, it can motivate them to find their own inspiration in everyday life.</p>\n<h3>Final Thoughts</h3>\n<p>Finding inspiration in everyday life and sharing it through a blog can be an incredibly fulfilling experience. You don’t need to wait for grand or extraordinary moments; sometimes, the most inspiring stories come from the small, genuine experiences in our daily routines. So, if there’s something you love, why not start blogging about it? Embrace the joy of sharing your hobbies, inspire others, and build a community around what brings you happiness. After all, inspiration is all around—you just have to look for it!</p>",
            "image": "https://www.sahebansari.com/media/posts/5/inspire-2.png",
            "author": {
                "name": "Saheb Ansari"
            },
            "tags": [
                   "Posts",
                   "Passion",
                   "Inspiration",
                   "Blogging"
            ],
            "date_published": "2024-11-13T23:08:33+05:30",
            "date_modified": "2024-12-06T08:19:37+05:30"
        },
        {
            "id": "https://www.sahebansari.com/ai-the-new-best-friend-you-never-knew-you-needed.html",
            "url": "https://www.sahebansari.com/ai-the-new-best-friend-you-never-knew-you-needed.html",
            "title": "AI: The new best friend you never knew you needed",
            "summary": "Hey there, future-dweller! So, you’ve heard about Artificial Intelligence (AI), right? It’s that fancy buzzword everyone’s been throwing around like&hellip;",
            "content_html": "<h3><strong>Hey there, future-dweller!</strong></h3>\n<p>So, you’ve heard about Artificial Intelligence (AI), right? It’s that fancy buzzword everyone’s been throwing around like it’s the new avocado toast. But what’s all the fuss about, really? Let’s dive into why AI is not just another fad, but actually your future BFF (Best Friend Forever).</p>\n<h3><strong>The AI Hype Train: </strong><em>All Aboard!</em></h3>\n<p>Remember when smartphones were new and we couldn’t stop poking at screens? Well, AI is like that, but on digital steroids. It’s already driving cars, diagnosing diseases, and yes, even helping you choose the next binge-worthy show on Netflix. Imagine having a personal assistant who never sleeps, never gets grumpy, and actually loves organizing your life. Sounds dreamy, right?</p>\n<h3><strong>AI at Home: <em>Not Just for Sci-Fi Movies</em></strong></h3>\n<p>Picture this: You wake up to the smell of freshly brewed coffee, thanks to your AI-powered coffee maker. Your AI butler, let’s call him “Jarvis” (because why not), has already adjusted the room temperature to your liking and played your favorite morning jam. And the best part? You didn’t have to lift a finger.</p>\n<p>Oh, and let’s not forget the AI vacuum cleaner that’s not just sucking up dust but also your existential dread of cleaning.</p>\n<h3><strong>Work: <em>The AI Co-Worker Who’s Never Late</em></strong></h3>\n<p>Say goodbye to the days of stressing over spreadsheets. Your new AI co-worker handles data entry faster than you can say “Ctrl + C, Ctrl + V.” It’s like having an office buddy who doesn’t steal your lunch from the fridge. Plus, AI can help you brainstorm, draft emails, and even schedule meetings – all while you get to focus on the fun stuff, like coming up with the next big idea (or just sipping coffee in peace).</p>\n<h3><strong>AI in Healthcare: <em>Because Dr. Google Needs an Upgrade</em></strong></h3>\n<p>We’ve all been there: a quick search about a headache on Google, and suddenly you’re convinced you have a rare tropical disease. With AI, you can actually get accurate health insights without the unnecessary panic. AI systems can analyze medical data, predict potential health issues, and even assist in surgeries. It’s like having a doctor who’s always on call and never prescribes you WebMD-induced anxiety.</p>\n<h3><strong>The Future: <em>AI’s Crystal Ball</em></strong></h3>\n<p>Now, let’s peek into the future. AI could be the driving force behind flying cars, smart cities, and maybe even those cool hologram calls we’ve been promised since forever. Imagine a world where traffic jams are a thing of the past because AI manages the roads, or where your fridge restocks itself because it knows you’ve run out of milk. It’s not just sci-fi anymore; it’s the future we’re speeding towards.</p>\n<h3><strong>But Wait, There’s More: <em>The Fun Stuff!</em></strong></h3>\n<p>Ever wished you had more time to binge-watch cat videos or scroll through memes? With AI taking over the mundane tasks, you’ll have more free time for the important things in life. Plus, AI can even help you discover new hobbies or connect with people who share your quirky interests.</p>\n<p>So, there you have it – AI isn’t just about robots and algorithms; it’s about making life easier, more fun, and a whole lot smarter. Embrace the AI revolution, and who knows, you might just find your new best friend in a machine.</p>\n<p>Until next time, keep calm and let AI handle it!</p>\n<div> </div>\n<p>I hope you enjoyed that light-hearted take on the future of AI! What do you think?</p>\n<p><br><br></p>",
            "image": "https://www.sahebansari.com/media/posts/3/2151675091.jpg",
            "author": {
                "name": "Saheb Ansari"
            },
            "tags": [
                   "Technology",
                   "Posts",
                   "AI"
            ],
            "date_published": "2024-11-10T12:59:27+05:30",
            "date_modified": "2024-12-06T11:03:13+05:30"
        },
        {
            "id": "https://www.sahebansari.com/secure-web-api-by-using-latest-tls-version.html",
            "url": "https://www.sahebansari.com/secure-web-api-by-using-latest-tls-version.html",
            "title": "Are you TLS 1.2 ready? Force your secure Web API to use TLS 1.2",
            "summary": "What is TLS? Transport Layer Security (TLS) is an industry security standard to help protect data transmitted over the internet.",
            "content_html": "<p class=\"align-left\"><strong>What is TLS?</strong><br>Transport Layer Security (TLS) is an industry security standard to help protect data transmitted over the internet. The newest version of TLS, 1.2 provides enhanced security and it is the current standard.<br><br><strong>.NET Framework &amp; TLS </strong><br>The .NET framework uses common language runtime, used as an execution engine and class library providing reusable code. Older versions of .NET do not support the newer TLS 1.2 so it is recommended to also upgrade .NET to at least 4.5 if you are using an older version of Windows. The .NET 4.5 supports TLS 1.2 but it is not the default protocol so you need to opt-in to use the latest TLS 1.2.</p>\n<figure class=\"post__image post__image--center\"><br><img loading=\"lazy\"  style=\"outline: 3px solid rgba(var(--color-primary-rgb), 0.55) !important;\" src=\"https://www.sahebansari.com/media/posts/2/step0005.png\" alt=\"TLS 1.2\" width=\"293\" height=\"173\" sizes=\"(max-width: 48em) 100vw, 100vw\" srcset=\"https://www.sahebansari.com/media/posts/2/responsive/step0005-xs.png 300w ,https://www.sahebansari.com/media/posts/2/responsive/step0005-sm.png 480w ,https://www.sahebansari.com/media/posts/2/responsive/step0005-md.png 768w\"></figure><br><strong>Forcing a secure website and web API to use TLS 1.2</strong><br>With the recent upgrade of TLS 1.0 and 1.1 to TLS 1.2. Older TLS 1.0 and TLS 1.1 being deprecated, So, you have to force your websites/services to run over TLS 1.2.<br>You will get below error due to TLS upgrade, the latest browsers by default will make a call to service (API) using TLS1.2  and API will not accept the request with new TLS version. So to fix this issue you have to force API to accept the request with new TLS 1.2 version.<br><br><i>GET - An unhandled exception occurred. System.InvalidOperationException: An error occurred while processing this request. ---&gt; Microsoft.OData.Client.DataServiceTransportException: The underlying connection was closed: An unexpected error occurred on a send. ---&gt; System.Net.WebException: The underlying connection was closed: An unexpected error occurred on a send. ---&gt; System.IO.IOException: Unable to read data from the transport connection: An existing connection was forcibly closed by the remote host. ---&gt; System.Net.Sockets.SocketException: An existing connection was forcibly closed by the remote host</i><br><i><br></i><strong>To fix this issue you have to add below lines to global.asax</strong></p>\n<pre class=\"language-csharp line-numbers\"><code>protected void Application_Start()  \n{  \n     ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls \n                | SecurityProtocolType.Tls11 \n                | SecurityProtocolType.Tls12;  \n}  </code></pre>",
            "image": "https://www.sahebansari.com/media/posts/2/step0005-2.png",
            "author": {
                "name": "Saheb Ansari"
            },
            "tags": [
                   "Technology",
                   "Posts"
            ],
            "date_published": "2024-11-09T11:52:54+05:30",
            "date_modified": "2024-11-24T22:40:10+05:30"
        }
    ]
}
