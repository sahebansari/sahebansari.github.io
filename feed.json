{
    "version": "https://jsonfeed.org/version/1",
    "title": "Saheb Ansari | Software Engineer",
    "description": "",
    "home_page_url": "https://www.sahebansari.com",
    "feed_url": "https://www.sahebansari.com/feed.json",
    "user_comment": "",
    "icon": "https://www.sahebansari.com/media/website/logo-transparent-svg-2.svg",
    "author": {
        "name": "Saheb Ansari"
    },
    "items": [
        {
            "id": "https://www.sahebansari.com/exploring-the-unique-features-of-aspnet-core-9.html",
            "url": "https://www.sahebansari.com/exploring-the-unique-features-of-aspnet-core-9.html",
            "title": "Exploring the Unique Features of ASP.NET Core 9: A Comprehensive Guide with Examples",
            "summary": "ASP.NET Core 9, the latest iteration of Microsoft's robust web framework, brings a plethora of enhancements aimed at improving developer&hellip;",
            "content_html": "<p>ASP.NET Core 9, the latest iteration of Microsoft's robust web framework, brings a plethora of enhancements aimed at improving developer productivity, performance, and the overall experience of building modern web applications. This article will highlight the most intriguing features of ASP.NET Core 9, complete with example code to demonstrate their capabilities.</p>\n<hr>\n<p><strong>1. Native Support for Blazor Hybrid Apps</strong><br>With ASP.NET Core 9, Blazor apps can now seamlessly integrate with native desktop and mobile platforms. This feature allows developers to share UI components across web and native platforms.<br><br><strong>Example: Blazor Component for Both Web and Native</strong></p>\n<pre class=\"language-aspnet line-numbers\"><code>razor\n\n&lt;h1&gt;Hello, Blazor Hybrid!&lt;/h1&gt;\n&lt;p&gt;This component works on both web and native platforms.&lt;/p&gt;</code></pre>\n<p>To use this component in a hybrid app:<br>Add it to a .razor file in your project.<br>Use it in a web or native application via the same Razor syntax.</p>\n<p><strong>2. Improved Minimal APIs</strong><br>Minimal APIs have been further enhanced in ASP.NET Core 9, making it easier than ever to build lightweight services.<br><br><strong>Example: Minimal API with OpenAPI Documentation</strong></p>\n<pre class=\"language-csharp line-numbers\"><code>csharp\n\nvar builder = WebApplication.CreateBuilder(args);\nvar app = builder.Build();\n\napp.MapGet(\"/api/hello\", () =&gt; Results.Ok(\"Hello, World!\"))\n   .WithName(\"GetHello\")\n   .WithOpenApi(); // Automatically generates OpenAPI documentation\n\napp.Run();</code></pre>\n<p><br>Now, by running your app, OpenAPI documentation will be generated and available at <em><span style=\"text-decoration: underline;\">/swagger</span></em>.<br><br><strong>3. Enhanced Middleware Pipelines</strong><br>Middleware is at the heart of ASP.NET Core, and the latest version provides more flexibility, including middleware chaining with better error handling.<br><br><strong>Example: Conditional Middleware Execution</strong></p>\n<pre class=\"language-csharp line-numbers\"><code>csharp\n\napp.Use(async (context, next) =&gt;\n{\n    if (context.Request.Path == \"/admin\")\n    {\n        await context.Response.WriteAsync(\"Admin Access Only\");\n    }\n    else\n    {\n        await next();\n    }\n});\napp.MapGet(\"/\", () =&gt; \"Welcome to ASP.NET Core 9!\");</code></pre>\n<p><strong>4. Performance Improvements with Native AOT</strong><br>ASP.NET Core 9 introduces Native Ahead-Of-Time (AOT) compilation, which dramatically improves the performance of your apps by precompiling them into optimized machine code.<br><br><strong>Example: Enabling Native AOT</strong><br>In your project file:</p>\n<pre class=\"language-html line-numbers\"><code>xml\n\n&lt;PropertyGroup&gt;\n  &lt;PublishAot&gt;true&lt;/PublishAot&gt;\n&lt;/PropertyGroup&gt;</code></pre>\n<p>Publish your app using:</p>\n<pre class=\"language-bash line-numbers\"><code>bash\n\ndotnet publish -c Release</code></pre>\n<p><strong>5. SignalR Enhancements</strong><br>SignalR has received updates for better real-time communication, including reduced latency and extended protocol support.<br><br><strong>Example: Simple SignalR Setup</strong></p>\n<pre class=\"language-csharp line-numbers\"><code>csharp\n\nvar builder = WebApplication.CreateBuilder(args);\nvar app = builder.Build();\n\napp.MapHub&lt;ChatHub&gt;(\"/chat\");\n\npublic class ChatHub : Hub\n{\n    public async Task SendMessage(string user, string message)\n    {\n        await Clients.All.SendAsync(\"ReceiveMessage\", user, message);\n    }\n}\n\napp.Run();</code></pre>\n<p>On the client side, use JavaScript or .NET to connect to <em><span style=\"text-decoration: underline;\">/chat</span></em>.<br><br><strong>6. Cross-Origin Resource Sharing (CORS) Improvements</strong><br>CORS is more configurable in ASP.NET Core 9, allowing granular control over cross-origin requests.<br><br><strong>Example: Configuring CORS</strong></p>\n<pre class=\"language-csharp line-numbers\"><code>csharp\n\nbuilder.Services.AddCors(options =&gt;\n{\n    options.AddPolicy(\"AllowSpecificOrigin\",\n        builder =&gt; builder.WithOrigins(\"https://example.com\")\n                          .AllowAnyMethod()\n                          .AllowAnyHeader());\n});\n\napp.UseCors(\"AllowSpecificOrigin\");\napp.MapGet(\"/\", () =&gt; \"CORS Configured!\");</code></pre>\n<p><strong>7. Modernized Dependency Injection</strong><br>ASP.NET Core 9 introduces better ways to register and resolve services, including dynamic service providers.<br><br><strong>Example: Registering Services</strong></p>\n<pre class=\"language-csharp line-numbers\"><code>csharp\n\nbuilder.Services.AddSingleton&lt;IMyService, MyService&gt;();\n\npublic interface IMyService\n{\n    string GetData();\n}\n\npublic class MyService : IMyService\n{\n    public string GetData() =&gt; \"Hello from MyService!\";\n}\n\napp.MapGet(\"/service\", (IMyService service) =&gt; service.GetData());</code></pre>\n<p><br><strong>Conclusion</strong><br>ASP.NET Core 9 continues to set the benchmark for web development frameworks by combining performance, simplicity, and versatility. Whether you're building a simple API or a complex hybrid application, these features enable you to deliver high-quality solutions efficiently.</p>",
            "image": "https://www.sahebansari.com/media/posts/10/aspnet9.jpg",
            "author": {
                "name": "Saheb Ansari"
            },
            "tags": [
                   "C#",
                   "ASP.NET"
            ],
            "date_published": "2024-11-30T20:11:43+05:30",
            "date_modified": "2024-11-30T20:11:43+05:30"
        },
        {
            "id": "https://www.sahebansari.com/mastering-clean-code-best-practices-for-error-free-readable-and-lightweight-c-programming.html",
            "url": "https://www.sahebansari.com/mastering-clean-code-best-practices-for-error-free-readable-and-lightweight-c-programming.html",
            "title": "Mastering Clean Code: Best Practices for Error-free, Readable, and Lightweight C# Programming",
            "summary": "Clean code is the hallmark of a skilled software developer. It not only improves code readability but also reduces errors&hellip;",
            "content_html": "<p class=\"dropcap\">Clean code is the hallmark of a skilled software developer. It not only improves code readability but also reduces errors and makes maintenance and scalability easier. In this blog post, we will explore some best coding practices, error handling techniques, and code optimization tips to help you write clean, efficient, and reliable C# code.Â <br><br><strong>1. Meaningful and Consistent Naming Conventions:</strong><br>One of the fundamental principles of writing clean code is to use meaningful names for variables, functions, classes, and other entities. Ensure that your code follows a consistent naming convention (e.g., camel case or Pascal case) throughout the project. Meaningful names make code more readable, self-documenting, and provide context to fellow developers. Consistency is an essential aspect of clean code. Adopt a consistent naming convention for variables, functions, and classes. Use descriptive names that convey their purpose, making it easier for others to understand and maintain the code.<br><br></p>\n<pre class=\"language-csharp line-numbers\"><code>// C#\n// Example of meaningful variable names\nint studentAge = 20;\nstring studentName = \"John Doe\";\n\n// Example of meaningful function names\npublic bool IsAdult(int age)\n{\n    return age &gt;= 18;\n}</code></pre>\n<p><br><strong>2. Proper Indentation and Formatting:</strong><br>Consistent indentation and code formatting greatly enhance code readability. Use proper spacing and line breaks to organize your code logically. Avoid long lines of code and wrap them to fit within a reasonable length (80-120 characters) for better legibility.</p>\n<pre class=\"language-csharp line-numbers\"><code>// C#\n// Example of properly indented and formatted code\npublic void CalculateSum(int a, int b)\n{\n    int sum = a + b;\n    \n    Console.WriteLine(\"The sum of {0} and {1} is {2}\", a, b, sum);\n}</code></pre>\n<p><br><strong>3. Maintain Short and Focused Methods:</strong><br>To promote code readability and reusability, keep your methods short, focused, and following the Single Responsibility Principle(SRP). Each method should have a clear purpose and do only one thing. Breaking down complex logic into smaller, modular methods not only aids comprehension but also simplifies testing and debugging. Divide your code into smaller, more manageable modules that each have a single responsibility. This approach allowing for code reuse, easier testing, and improved readability. Avoid long and monolithic functions or classes that become hard to comprehend and maintain.</p>\n<pre class=\"language-csharp line-numbers\"><code>// C#\n// Example of breaking down complex logic into smaller methods\npublic int CalculateSum(int a, int b)\n{\n    return a + b;\n}\n\npublic void DisplaySum(int sum)\n{\n    Console.WriteLine(\"The sum is: \" + sum);\n}\n\n// Usage\nint result = CalculateSum(3, 4);\nDisplaySum(result);</code></pre>\n<p><strong>4. Effective Error Handling:</strong><br>Clean code should handle errors gracefully and provide helpful messages for debugging and troubleshooting. Utilize exception handling techniques such as try-catch-finally blocks to catch and handle exceptions appropriately. Avoid using broad catch-all exceptions; instead, catch specific exceptions that you can handle explicitly.</p>\n<pre class=\"language-csharp line-numbers\"><code>// C#\n// Example of proper error handling\ntry\n{\n    int[] numbers = new int[] { 1, 2, 3 };\n    int result = numbers[4]; // accessing an out-of-bounds index\n}\ncatch (IndexOutOfRangeException ex)\n{\n    Console.WriteLine(\"An error occurred: \" + ex.Message);\n}</code></pre>\n<p><strong>5. Optimize Code for Performance:</strong><br>Clean code also means optimizing performance by reducing unnecessary computations, memory usage, and improving code efficiency. Utilize built-in data structures and algorithms whenever possible and avoid reinventing the wheel.</p>\n<pre class=\"language-csharp line-numbers\"><code>// C#\n// Example of using built-in C# features for efficient code\nList&lt;int&gt; numbers = new List&lt;int&gt;() { 1, 2, 3 };\n\nforeach (int number in numbers)\n{\n    Console.WriteLine(number);\n}</code></pre>\n<p><strong>6. Minimize Dependencies:</strong><br>Reduce coupling and dependencies between different parts of your code. Code that is tightly coupled becomes challenging to understand and maintain. Use dependency injection and interfaces to decouple components, promoting code reuse and testability.<br><br><strong>7. Code Refactoring and Simplicity:</strong><br>Refactor your code frequently to eliminate duplication, improve performance, and simplify the implementation. Don't be afraid to rewrite and optimize code if necessary. Simplicity should always be prioritized over complexity to enhance readability.</p>\n<p><strong>Conclusion:</strong><br>Writing clean code in C# goes beyond adhering to a set of guidelines. It requires a mindset that prioritizes readability, error handling, and code optimization. By following best practices, using meaningful naming conventions, maintaining proper indentation, and employing efficient error handling, you can ensure your code is clean, easy to understand, and performs optimally. Remember, clean code benefits not only you but also the other developers who work on the project. So, strive for clean code and become a better programmer.</p>",
            "image": "https://www.sahebansari.com/media/posts/7/programming.png",
            "author": {
                "name": "Saheb Ansari"
            },
            "tags": [
                   "Programming",
                   "Posts",
                   "C#",
                   "Best Practices"
            ],
            "date_published": "2024-11-15T09:20:03+05:30",
            "date_modified": "2024-11-17T22:37:24+05:30"
        },
        {
            "id": "https://www.sahebansari.com/blogging-your-passions-finding-creative-inspiration-in-daily-life.html",
            "url": "https://www.sahebansari.com/blogging-your-passions-finding-creative-inspiration-in-daily-life.html",
            "title": "Blogging Your Passions: Finding Creative Inspiration in Daily Life",
            "summary": "In a world that's always buzzing with distractions and deadlines, taking time to find inspiration can feel like a luxury.",
            "content_html": "<p class=\"dropcap\">In a world that's always buzzing with distractions and deadlines, taking time to find inspiration can feel like a luxury. However, inspiration is closer than you might thinkâit can come from the things you enjoy doing every day. Blogging about your hobbies can be an incredible way to find inspiration, connect with like-minded people, and even bring a bit of joy to your readers. Hereâs how you can make the most of everyday moments and start blogging about what you love!<br><br><strong>1. Discover Inspiration in Small Moments</strong><br>Everyday life is filled with small, often overlooked moments that can serve as a source of inspiration. If you love cooking, a quiet weekend brunch could turn into a blog post about your favorite breakfast recipes or tips for creating the perfect pancake. If youâre passionate about photography, you could blog about capturing the beauty in your neighborhood. No matter your hobby, inspiration can come from observing and appreciating these small details.<br><br><strong>2. Show the World Your Unique Perspective</strong><br>One of the most powerful things about blogging is that it allows you to share your unique view with the world. Whether youâre a skilled painter or an amateur gardener, your perspective matters. Maybe you have a creative way of organizing your workspace, or a unique approach to taking care of plants. Share these insights! Showing your perspective gives readers a glimpse into your life and helps them see familiar things in new ways.<br><br><strong>3. Connect with Your Audience through Authenticity</strong><br>When you blog about a hobby, youâre talking about something you truly care about, and that passion shines through. Authenticity is magneticâit draws people in. When readers sense that youâre genuinely interested in what youâre writing about, theyâre more likely to connect with your blog and become regular visitors. Sharing your challenges, mistakes, and personal growth in your hobby also adds authenticity. People enjoy reading about real experiences and can relate to the ups and downs of learning and improving in any craft.<br><br><strong>4. Use Blogging to Track Your Progress</strong><br>Blogging about your hobbies also serves as a fantastic way to track your progress. By writing regularly, you create a timeline of your growth and accomplishments. For example, if you blog about learning to play the guitar, your early posts might focus on basic chords, while later ones could highlight more advanced techniques. This progress not only keeps you motivated but also inspires your readers, especially those who are just starting out with the same hobby.<br><br><strong>5. Explore New Ideas and Topics</strong><br>Writing about your hobbies can push you to learn more about them. When you sit down to write a post, you might find yourself researching, exploring new topics, or trying out new techniques so you can share them with your readers. Blogging gives you a reason to dig deeper into your interests, helping you learn and grow in the process. You might even come up with content ideas that you wouldnât have considered before, like âTop 5 Mistakes I Made as a New Gardenerâ or âHow to Choose the Perfect Brush for Watercolor Painting.â<br><br><strong>6. Build a Community of Like-Minded People</strong><br>One of the best aspects of blogging is the chance to connect with others who share your interests. By putting your thoughts and experiences online, you attract people who are also interested in your hobby. Engaging with comments, joining hobby-related forums, or connecting with other bloggers can expand your knowledge, give you new ideas, and help you build a support system. This community can provide you with feedback, encouragement, and even friendship as you continue exploring your interests.<br><br><strong>7. Inspire Others with Your Passion</strong><br>Lastly, blogging about your hobbies can inspire others to start their own journey. Your passion and dedication might encourage someone whoâs hesitant about starting a new hobby to take the plunge. When people see how much joy, fulfillment, and personal growth you gain from your hobby, it can motivate them to find their own inspiration in everyday life.</p>\n<h3>Final Thoughts</h3>\n<p>Finding inspiration in everyday life and sharing it through a blog can be an incredibly fulfilling experience. You donât need to wait for grand or extraordinary moments; sometimes, the most inspiring stories come from the small, genuine experiences in our daily routines. So, if thereâs something you love, why not start blogging about it? Embrace the joy of sharing your hobbies, inspire others, and build a community around what brings you happiness. After all, inspiration is all aroundâyou just have to look for it!</p>",
            "image": "https://www.sahebansari.com/media/posts/5/inspire.png",
            "author": {
                "name": "Saheb Ansari"
            },
            "tags": [
                   "Posts",
                   "Passion",
                   "Inspiration",
                   "Blogging"
            ],
            "date_published": "2024-11-13T23:08:33+05:30",
            "date_modified": "2024-11-24T21:52:53+05:30"
        },
        {
            "id": "https://www.sahebansari.com/ai-the-new-best-friend-you-never-knew-you-needed.html",
            "url": "https://www.sahebansari.com/ai-the-new-best-friend-you-never-knew-you-needed.html",
            "title": "AI: The new best friend you never knew you needed",
            "summary": "Hey there, future-dweller! So, youâve heard about Artificial Intelligence (AI), right? Itâs that fancy buzzword everyoneâs been throwing around like&hellip;",
            "content_html": "<h3><strong>Hey there, future-dweller!</strong></h3>\n<p>So, youâve heard about Artificial Intelligence (AI), right? Itâs that fancy buzzword everyoneâs been throwing around like itâs the new avocado toast. But whatâs all the fuss about, really? Letâs dive into why AI is not just another fad, but actually your future BFF (Best Friend Forever).</p>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://www.sahebansari.com/media/posts/3/playfull-ai-2.png\" alt=\"\" width=\"400\" height=\"400\" sizes=\"(max-width: 48em) 100vw, 100vw\" srcset=\"https://www.sahebansari.com/media/posts/3/responsive/playfull-ai-2-xs.png 300w ,https://www.sahebansari.com/media/posts/3/responsive/playfull-ai-2-sm.png 480w ,https://www.sahebansari.com/media/posts/3/responsive/playfull-ai-2-md.png 768w\"></figure>\n<h3><strong>The AI Hype Train: All Aboard!</strong></h3>\n<p>Remember when smartphones were new and we couldnât stop poking at screens? Well, AI is like that, but on digital steroids. Itâs already driving cars, diagnosing diseases, and yes, even helping you choose the next binge-worthy show on Netflix. Imagine having a personal assistant who never sleeps, never gets grumpy, and actually loves organizing your life. Sounds dreamy, right?</p>\n<h3><strong>AI at Home: Not Just for Sci-Fi Movies</strong></h3>\n<p>Picture this: You wake up to the smell of freshly brewed coffee, thanks to your AI-powered coffee maker. Your AI butler, letâs call him âJarvisâ (because why not), has already adjusted the room temperature to your liking and played your favorite morning jam. And the best part? You didnât have to lift a finger.</p>\n<p>Oh, and letâs not forget the AI vacuum cleaner thatâs not just sucking up dust but also your existential dread of cleaning.</p>\n<h3><strong>Work: The AI Co-Worker Whoâs Never Late</strong></h3>\n<p>Say goodbye to the days of stressing over spreadsheets. Your new AI co-worker handles data entry faster than you can say âCtrl + C, Ctrl + V.â Itâs like having an office buddy who doesnât steal your lunch from the fridge. Plus, AI can help you brainstorm, draft emails, and even schedule meetings â all while you get to focus on the fun stuff, like coming up with the next big idea (or just sipping coffee in peace).</p>\n<h3><strong>AI in Healthcare: Because Dr. Google Needs an Upgrade</strong></h3>\n<p>Weâve all been there: a quick search about a headache on Google, and suddenly youâre convinced you have a rare tropical disease. With AI, you can actually get accurate health insights without the unnecessary panic. AI systems can analyze medical data, predict potential health issues, and even assist in surgeries. Itâs like having a doctor whoâs always on call and never prescribes you WebMD-induced anxiety.</p>\n<h3><strong>The Future: AIâs Crystal Ball</strong></h3>\n<p>Now, letâs peek into the future. AI could be the driving force behind flying cars, smart cities, and maybe even those cool hologram calls weâve been promised since forever. Imagine a world where traffic jams are a thing of the past because AI manages the roads, or where your fridge restocks itself because it knows youâve run out of milk. Itâs not just sci-fi anymore; itâs the future weâre speeding towards.</p>\n<h3><strong>But Wait, Thereâs More: The Fun Stuff!</strong></h3>\n<p>Ever wished you had more time to binge-watch cat videos or scroll through memes? With AI taking over the mundane tasks, youâll have more free time for the important things in life. Plus, AI can even help you discover new hobbies or connect with people who share your quirky interests.</p>\n<p>So, there you have it â AI isnât just about robots and algorithms; itâs about making life easier, more fun, and a whole lot smarter. Embrace the AI revolution, and who knows, you might just find your new best friend in a machine.</p>\n<p>Until next time, keep calm and let AI handle it!</p>\n<div>Â </div>\n<p>I hope you enjoyed that light-hearted take on the future of AI! What do you think?</p>\n<p><br><br></p>",
            "image": "https://www.sahebansari.com/media/posts/3/playfull-ai.png",
            "author": {
                "name": "Saheb Ansari"
            },
            "tags": [
                   "Technology",
                   "Posts",
                   "AI"
            ],
            "date_published": "2024-11-10T12:59:27+05:30",
            "date_modified": "2024-11-18T18:53:32+05:30"
        },
        {
            "id": "https://www.sahebansari.com/secure-web-api-by-using-latest-tls-version.html",
            "url": "https://www.sahebansari.com/secure-web-api-by-using-latest-tls-version.html",
            "title": "Are you TLS 1.2 ready? Force your secure Web API to use TLS 1.2",
            "summary": "What is TLS? Transport Layer Security (TLS) is an industry security standard to help protect data transmitted over the internet.",
            "content_html": "<p class=\"align-left\"><strong>What is TLS?</strong><br>Transport Layer Security (TLS) is an industry security standard to help protect data transmitted over the internet. The newest version of TLS, 1.2 provides enhanced security and it is the current standard.<br><br><strong>.NET Framework &amp; TLSÂ </strong><br>The .NET framework uses common language runtime, used as an execution engine and class library providing reusable code. Older versions of .NET do not support the newer TLS 1.2 so it is recommended to also upgrade .NET to at least 4.5 if you are using an older version of Windows. The .NET 4.5 supports TLS 1.2 but it is not the default protocol so you need to opt-in to use the latest TLS 1.2.</p>\n<figure class=\"post__image post__image--center\"><br><img loading=\"lazy\"  style=\"outline: 3px solid rgba(var(--color-primary-rgb), 0.55) !important;\" src=\"https://www.sahebansari.com/media/posts/2/step0005.png\" alt=\"TLS 1.2\" width=\"293\" height=\"173\" sizes=\"(max-width: 48em) 100vw, 100vw\" srcset=\"https://www.sahebansari.com/media/posts/2/responsive/step0005-xs.png 300w ,https://www.sahebansari.com/media/posts/2/responsive/step0005-sm.png 480w ,https://www.sahebansari.com/media/posts/2/responsive/step0005-md.png 768w\"></figure><br><strong>Forcing a secure website and web API to use TLS 1.2</strong><br>With the recent upgrade of TLS 1.0 and 1.1 to TLS 1.2. Older TLS 1.0 and TLS 1.1 being deprecated, So, you have to force your websites/services to run over TLS 1.2.<br>You will get below error due to TLS upgrade, the latest browsers by default willÂ makeÂ a call to service (API) using TLS1.2Â  and API will not accept the request with new TLS version. So to fix this issue you have to force API to accept the request with new TLS 1.2 version.<br><br><i>GET - An unhandled exception occurred. System.InvalidOperationException: An error occurred while processing this request. ---&gt; Microsoft.OData.Client.DataServiceTransportException: The underlying connection was closed: An unexpected error occurred on a send. ---&gt; System.Net.WebException: The underlying connection was closed: An unexpected error occurred on a send. ---&gt; System.IO.IOException: Unable to read data from the transport connection: An existing connection was forcibly closed by the remote host. ---&gt; System.Net.Sockets.SocketException: An existing connection was forcibly closed by the remote host</i><br><i><br></i><strong>To fix this issue you have to add below lines to global.asax</strong></p>\n<pre class=\"language-csharp line-numbers\"><code>protected void Application_Start()  \n{  \n     ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls \n                | SecurityProtocolType.Tls11 \n                | SecurityProtocolType.Tls12;  \n}  </code></pre>",
            "image": "https://www.sahebansari.com/media/posts/2/step0005-2.png",
            "author": {
                "name": "Saheb Ansari"
            },
            "tags": [
                   "Technology",
                   "Posts"
            ],
            "date_published": "2024-11-09T11:52:54+05:30",
            "date_modified": "2024-11-24T22:40:10+05:30"
        }
    ]
}
